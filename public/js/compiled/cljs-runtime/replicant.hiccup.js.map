{"version":3,"sources":["replicant/hiccup.cljc"],"mappings":"","names":[],"sourcesContent":["(ns replicant.hiccup\n  #?(:cljs (:require-macros [replicant.hiccup])))\n\n(defmacro hget [x k]\n  (if (:ns &env)\n    `(aget ~x ~k)\n    `(nth ~x ~k)))\n\n(defmacro tag-name [headers]\n  `(hget ~headers 0))\n\n(defmacro id [headers]\n  `(hget ~headers 1))\n\n(defmacro classes [headers]\n  `(hget ~headers 2))\n\n(defmacro rkey [headers]\n  `(hget ~headers 3))\n\n(defmacro attrs [headers]\n  `(hget ~headers 4))\n\n(defmacro children [headers]\n  `(hget ~headers 5))\n\n(defmacro html-ns [headers]\n  `(hget ~headers 6))\n\n(defmacro sexp [headers]\n  `(hget ~headers 7))\n\n(defmacro text [headers]\n  `(hget ~headers 8))\n\n(defmacro get-key [parsed-tag attrs]\n  `(when-let [k# (:replicant/key ~attrs)]\n     [(hget ~parsed-tag 0) k#]))\n\n(defmacro create [parsed-tag attrs children ns sexp]\n  (if (:ns &env)\n    `(doto ~parsed-tag\n       (.push (get-key ~parsed-tag ~attrs))\n       (.push ~attrs)\n       (.push ~children)\n       (.push ~ns)\n       (.push ~sexp)\n       (.push nil))\n    `(-> ~parsed-tag\n         (conj (get-key ~parsed-tag ~attrs))\n         (conj ~attrs)\n         (conj ~children)\n         (conj ~ns)\n         (conj ~sexp)\n         (conj nil))))\n\n(defmacro create-text-node [text]\n  (if (:ns &env)\n    `(js/Array. nil nil nil nil nil nil nil ~text ~text)\n    `[nil nil nil nil nil nil nil ~text ~text]))\n\n(defmacro update-attrs [headers & args]\n  (if (:ns &env)\n    `(do\n       (aset ~headers 4 (~(first args) (aget ~headers 4) ~@(rest args)))\n       ~headers)\n    `(update ~headers 4 ~@args)))\n"],"x_google_ignoreList":[0]}