{"version":3,"sources":["tool/app.cljs"],"mappings":"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","names":["js/tool","js/tool.app","js/tool.app.!state","tool.app/!state","cljs.core.atom","tool.app/event-handler2","replicant-data","handler-data","cljs.core.prn","p__29936","map__29937","cljs.core/--destructure-map","cljs.core.get","tool.app/edit-view","draftdd","p__29938","map__29939","tool.app/display-view","draft","saved","tool.app/listar-vals","lista","cljs.core/empty?","cljs.core/first","G__29941","cljs.core/rest","p__29944","map__29945","tool.app/display-results","sec-suc","frecuencias","sucesores","cljs.core.into","p1__29942#","cljs.core.map","cljs.core/PersistentVector","p1__29943#","cljs.core/keys","cljs.core/vals","tool.app/main-view","state","tool.app/render!","replicant.dom/render","js/document.getElementById","p__29946","map__29947","tool.app/enrich-action-from-event","js-event","node","actions","clojure.walk/postwalk","x","cljs.core/Keyword","G__29948","tool.app/enrich-action-from-state","action","cljs.core/vector?","cljs.core._EQ_","cljs.core/second","tool.app/suc-nota","nota","id-pal","cljs.core/cons","G__29949","G__29950","G__29951","G__29952","G__29953","G__29954","tool.app/recorrer-vectores","pos","G__29955","G__29956","G__29957","tool.app/genfn-seq-suc","w","cljs.core/flatten","tool.app/process","p1__29958#","clojure.string.split","cljs.core.distinct","w-freq","cljs.core/frequencies","valencias","p1__29959#","cljs.core/PersistentHashMap","cljs.core.swap_BANG_","cljs.core/assoc","p__29960","map__29961","tool.app/event-handler","seq__29962","cljs.core/seq","chunk__29963","count__29964","i__29965","temp__5811__auto__","cljs.core/chunked-seq?","c__5525__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/next","vec__29974","seq__29975","first__29976","vec__29978","seq__29979","first__29980","enriched-action","cljs.core/deref","action-name","args","G__29977","G__29981","cljs.core.apply","cljs.core/swap!","cljs.core/dissoc","tool.app/start!","tool.app/init!","gadget.inspector/inspect","replicant.dom/set-dispatch!"],"sourcesContent":["(ns tool.app\n  (:require [clojure.string :as string]\n            [clojure.walk :as walk]\n            [gadget.inspector :as inspector]\n            [replicant.dom :as r]))\n\n;; (r/set-dispatch!\n;;   (fn [replicant-data handler-data]\n;;     (prn \"Click!\")))\n\n;; (r/render\n;;   (js/document.getElementById \"app\")\n;;   [:h1 {:on {:click [:whatever]}} \"Click me\"])\n\n(defonce ^:private !state (atom {:ui/banner-text \"An annoying banner\"}))\n\n(defn event-handler2 [replicant-data handler-data]\n     (prn \"Click!\"))\n\n(defn edit-view [{:something/keys [draftdd]}]\n  [:div\n   [:h2 \"This tool, (The Brauer Analysis Tool) allows you to perform a Brauer Analysis of some data. Enter a message below.\"]\n   [:form {:on {:submit [[:dom/prevent-default]\n                         [:db/assoc :something/saved [:db/get :something/draft]]\n                         [:tool/process]]}}\n    [:span.wrap-input\n     [:textarea#msg {:replicant/on-mount [[:db/assoc :something/draft-input-element :dom/node]]\n                     :on {:input [[:db/assoc :something/draft :event/target.value]]}\n                     :cols 50 :rows 10}]]\n    [:br]\n    [:button {:type :submit} \"Process\"]\n    [:button {:type :submit} \"Clean\"]\n    [:button {:type :submit} \"Example\"]]])\n\n(defn display-view [{:something/keys [draft saved]}]\n  [:div\n   [:h2 \"On display\"]\n   [:ul\n    [:li {:replicant/key \"draft\"} \"Draft: \" draft]\n    [:li {:replicant/key \"saved\"} \"Saved: \" saved]]])\n\n(defn listar-vals [lista]\n  (cond\n    (empty? lista) \"\"\n    :else (str (first lista) \" < \" (listar-vals (rest lista)))))\n\n(defn display-results [{:something/keys [sec-suc saved frecuencias sucesores]}]\n  (prn \"desde adento: \" sec-suc frecuencias)\n  [:div\n   [:button.collapsible \"Valencies\"]\n   [:div.content\n    (into [:ul] (map #(vector :li (str % \": \" (frecuencias %))) sec-suc))]\n   [:button.collapsible \"Succesor Sequences\"]\n   [:div.content\n    (into [:ul] (map #(vector :li (str \"S_\" (first (keys %)) \" = \" (listar-vals (first (vals %))) (first (first (vals %))) )) sucesores))]])\n\n(defn main-view [state]\n  [:div {:style {:position \"relative\"}}\n   [:h1 {:on {:click [:whatever]}} \"BA - TOOL\"]\n   (edit-view state)\n   (display-view state)\n   (display-results state)\n   (prn state)])\n\n(defn render! [state]\n  (r/render\n   (js/document.getElementById \"app\")\n   (main-view state)))\n\n(defn- enrich-action-from-event [{:replicant/keys [js-event node]} actions]\n  (walk/postwalk\n   (fn [x]\n     (cond\n       (keyword? x)\n       (case x\n         :event/target.value (-> js-event .-target .-value)\n         :dom/node node\n         x)\n       :else x))\n   actions))\n\n(defn- enrich-action-from-state [state action]\n  (walk/postwalk\n   (fn [x]\n     (cond\n       (and (vector? x)\n            (= :db/get (first x))) (get state (second x))\n       :else x))\n   action))\n\n(defn suc-nota [lista nota id-pal]\n  (cond\n    (empty? lista) lista\n    (= (first lista) nota) (cons (str \"w_\" id-pal) (suc-nota (rest lista) nota id-pal))\n    :else (suc-nota (rest lista) nota id-pal)\n    ))\n\n(defn recorrer-vectores [lista nota pos]\n  (cond\n    (empty? lista) lista\n    :else (cons (suc-nota (first lista) nota pos) (recorrer-vectores (rest lista) nota (inc pos)))\n    ))\n\n(defn genfn-seq-suc [w]\n  (fn [nota] {nota (flatten (recorrer-vectores w nota 1))}))\n\n(defn process [state]\n  (let [w (into [] (map #(string/split % #\" \") (string/split (:something/draft state) #\"\\n\")))\n        sec-suc (distinct (flatten w))\n        w-freq (frequencies (flatten w))\n        valencias (map #(hash-map %1 (w-freq %1)) sec-suc)\n        sucesores (map (genfn-seq-suc w) sec-suc)]\n    (swap! !state assoc :something/frecuencias w-freq :something/sec-suc sec-suc :something/sucesores sucesores)\n    (prn \"w: \" w \"sec-suc: \" sec-suc \" w-freq: \" w-freq \" val: \" valencias)))\n\n(defn event-handler [{:replicant/keys [^js js-event] :as replicant-data} actions]\n  (doseq [action actions]\n    (prn \"Triggered action\" action)\n    (let [enriched-action (->> action\n                               (enrich-action-from-event replicant-data)\n                               (enrich-action-from-state @!state))\n          [action-name & args] enriched-action]\n      (prn \"Enriched action\" enriched-action)\n      (case action-name\n        :dom/prevent-default (.preventDefault js-event)\n        :db/assoc (apply swap! !state assoc args)\n        :db/dissoc (apply swap! !state dissoc args)\n        :dom/set-input-text (set! (.-value (first args)) (second args))\n        :dom/focus-element (.focus (first args))\n        :tool/process (process @!state)\n        (prn \"Unknown action\" action))))\n  (render! @!state))\n\n(defn ^{:dev/after-load true :export true} start! []\n  (render! @!state))\n\n(defn ^:export init! []\n  (inspector/inspect \"App state\" !state)\n  (r/set-dispatch! event-handler)\n  (start!))\n\n"]}