{"version":3,"sources":["replicant/console_logger.cljc"],"mappings":";AAKA,+BAAA,/BAAMA,sEAAKC;AAAX,AAEW,OAACC,YAAeD;;AAE3B,yCAAA,zCAAME,0FAAeF;AAArB,AAEW,OAACG,cAAiBH;;AAE7B,uCAAA,vCAAMI;AAAN,AACW,OAACC;;AAEZ,kCAAA,lCAAMC,4EAAQN;AAAd,AACE,IAAAO,mBAAA,KAAAC;AAAA,AAAA,IAAAC,kDAAAC;IAAAC,6CAAAC;IAAAC,kDAAA;IAAAC,6CAAA,WAAAC;AAAA,AAAA,OAAAR,wBAAAQ;;AAAA,AAAA,CAAAL,sCAAAG;;AAAA,CAAAD,iCAAAE;;AAAA,IAAA,AAAc,AAACE,iDAAchB;UAA7B,AAAA,CAAAY,iCAAAD;;AAAA,CAAAD,sCAAAD;;AAAA,mDAAAF;;AAEF,sCAAA,tCAAMU,oFAAYC;AAAlB,AACE,OAACC,qBACA,WAAKnB;AAAL,AACE,GAAI,AAACoB,qBAAKpB;uFAEH,+CAAA,WAAAqB,1DAACC,vFACD,oDAAA,7CAACG;AADD,AAAS,OAAA,6GAAqB,AAACF,eAAK,cAAAF,dAACG;GADrCxB;;AAGLA;;GACJkB;;AAEH,2CAAA,3CAAMQ,8FAAiBC;AAAvB,AACE,IAAMC,WAAS,AAACX,oCAAWU;IACrBE,MAAI,EAAO,AAACC,wGAAOF;AADzB,AAEE,GAAI,OAAA,NAAGC;AACLD;;AACA,8HAAA,AAAA,vHAACG,6CAAK,AAACC,cAAI,6CAAA,7CAACC,iDAAOL;;;AAEzB,kCAAA,0CAAAM,5EAAMI;AAAN,AAAA,IAAAH,aAAAD;IAAAC,iBAAA,AAAAC,4BAAAD;YAAA,AAAAE,4CAAAF,eAAA,nEAAsBI;cAAtB,AAAAF,4CAAAF,eAAA,rEAA4BK;aAA5B,AAAAH,4CAAAF,eAAA,pEAAoCR;YAApC,AAAAU,4CAAAF,eAAA,nEAA2CM;WAA3C,AAAAJ,4CAAAF,eAAA,lEAAiDO;AAAjD,AACE,AAACxC,uCAAc,CAAA,kEAA2BqC;;AAC1C,AAACxC,6BAAIyC;;AACL,oBAAMC;AAAN,AACE,AAAC1C,6BAAI,CAAA,yDAAkB0C;;AADzB;;AAEA,oBAAMC;AAAN,AACE,IAAMC,kBAAU,AAACrC,gCAAOoC;AAAxB,AACE,GAAI,8BAAA,7BAAG,EAAOC;AACZ,AAAC5C,6BAAI,CAAA,eAAoB4C;;AACzB,AACE,6BAAA,7BAAC5C;;AACD,AAACA,6BAAI4C;;;AANb;;AAOA,6BAAA,7BAAC5C;;AACD,AAACA,6BAAI,AAACO,gCAAO,AAACoB,yCAAgBC;;AAC9B,OAACvB","names":["replicant.console-logger/log","x","js/console.log","replicant.console-logger/print-heading","js/console.group","replicant.console-logger/close-group","js/console.groupEnd","replicant.console-logger/pprstr","sb__5647__auto__","goog.string/StringBuffer","*print-newline*-orig-val__37451","cljs.core/*print-newline*","*print-fn*-orig-val__37452","cljs.core/*print-fn*","*print-newline*-temp-val__37453","*print-fn*-temp-val__37454","x__5648__auto__","cljs.pprint.pprint","replicant.console-logger/scrub-sexp","sexp","clojure.walk/prewalk","cljs.core/map?","p1__37463#","cljs.core.remove","cljs.core/meta","cljs.core/val","cljs.core.into","replicant.console-logger/abbreviate-sexp","hiccup","scrubbed","len","cljs.core.pr_str","cljs.core.conj","cljs.core/vec","cljs.core.take","p__37472","map__37473","cljs.core/--destructure-map","cljs.core.get","replicant.console-logger/report","title","message","fname","data","formatted"],"sourcesContent":["(ns replicant.console-logger\n  (:require #?(:clj [clojure.pprint :as pprint]\n               :cljs [cljs.pprint :as pprint])\n            [clojure.walk :as walk]))\n\n(defn log [x]\n  #?(:clj (println x)\n     :cljs (js/console.log x)))\n\n(defn print-heading [x]\n  #?(:clj (println x)\n     :cljs (js/console.group x)))\n\n(defn close-group []\n  #?(:cljs (js/console.groupEnd)))\n\n(defn pprstr [x]\n  (with-out-str (pprint/pprint x)))\n\n(defn scrub-sexp [sexp]\n  (walk/prewalk\n   (fn [x]\n     (if (map? x)\n       (->> x\n            (remove #(:replicant/internal (meta (val %))))\n            (into {}))\n       x))\n   sexp))\n\n(defn abbreviate-sexp [hiccup]\n  (let [scrubbed (scrub-sexp hiccup)\n        len (count (pr-str scrubbed))]\n    (if (< len 100)\n      scrubbed\n      (conj (vec (take 2 scrubbed)) '...))))\n\n(defn report [{:keys [title message hiccup fname data]}]\n  (print-heading (str \"Replicant warning: \" title))\n  (log message)\n  (when fname\n    (log (str \"Function: \" fname)))\n  (when data\n    (let [formatted (pprstr data)]\n      (if (< (count formatted) 80)\n        (log (str \"Input data: \" formatted))\n        (do\n          (log \"Input data:\")\n          (log formatted)))))\n  (log \"Offending hiccup: \")\n  (log (pprstr (abbreviate-sexp hiccup)))\n  (close-group))\n"],"x_google_ignoreList":[0]}