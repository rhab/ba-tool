{"version":3,"sources":["replicant/dom.cljs"],"mappings":"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","names":["replicant.dom/remove-listener","el","event","temp__5811__auto__","old-handler","G__38886","replicant.dom/on-next-frame","f","js/requestAnimationFrame","replicant.dom/-on-transition-end","vec__38897","cljs.core.nth","n","dur","js/window.getComputedStyle","replicant.transition/get-transition-stats","cljs.core._EQ_","complete","cljs.core/volatile!","timer","started","js/Date","callback","_args","cn","listener","cljs.core/deref","js/clearTimeout","cljs.core/vreset!","js/setTimeout","replicant.dom/create-renderer","replicant.dom/t_replicant$dom38909","_this","text","js/document.createTextNode","tag-name","options","temp__5809__auto__","ns","js/document.createElementNS","js/document.createElement","this","style","v","cljs.core/name","attr","opt","handler","child-node","reference-node","insert-child","replace-child","idx","js/replicant","js/replicant.dom","js/replicant.dom.state","replicant.dom/state","replicant.dom/render","hiccup","rendering?","cljs.core.get_in","cljs.core/contains?","cljs.core.assoc","p1__38952#","cljs.core.update_in","cljs.core.conj","cljs.core/assoc-in","map__38958","cljs.core/--destructure-map","cljs.core.get","map__38959","renderer","current","unmounts","vdom","replicant.core.reconcile","cljs.core.update","cljs.core/merge","pending","cljs.core/first","p1__38953#","cljs.core/vec","cljs.core/rest","replicant.dom/set-dispatch!","replicant.core/*dispatch*"],"sourcesContent":["(ns replicant.dom\n  (:require [replicant.core :as r]\n            [replicant.protocols :as replicant]\n            [replicant.transition :as transition]))\n\n(defn remove-listener [^js/EventTarget el event]\n  (when-let [old-handler (some-> el .-replicantHandlers (aget event))]\n    (.removeEventListener el event old-handler)))\n\n(defn on-next-frame [f]\n  (js/requestAnimationFrame\n   #(js/requestAnimationFrame f)))\n\n(defn -on-transition-end [el f]\n  (let [[n dur] (-> (js/window.getComputedStyle el)\n                    (.getPropertyValue \"transition-duration\")\n                    transition/get-transition-stats)]\n    (if (= n 0)\n      (f)\n      (let [complete (volatile! 0)\n            timer (volatile! nil)\n            started (js/Date.)\n            callback (fn listener [& _args]\n                       (let [cn (vswap! complete inc)]\n                         (when (or (<= n cn)\n                                   (< dur (- (js/Date.) started)))\n                           (.removeEventListener el \"transitionend\" listener)\n                           (js/clearTimeout @timer)\n                           (f))))]\n        (.addEventListener el \"transitionend\" callback)\n        ;; The timer is a fail-safe. You could have set transition properties\n        ;; that either don't change, or don't change in a way that triggers an\n        ;; actual transition on unmount (e.g. changing height from auto to 0\n        ;; causes no transition). When this happens, there will not be as many\n        ;; transitionend events as there are transition durations. To avoid\n        ;; getting stuck, the timer will come in and clean up.\n        ;;\n        ;; The timer is set with a hefty delay to avoid cutting a transition\n        ;; short, in the case of a backed up browser working on overtime. Not\n        ;; sure how realistic this is, but better safe than sorry, and the\n        ;; important part is that the element doesn't get stuck forever.\n        (vreset! timer (js/setTimeout callback (+ dur 200)))))))\n\n(defn create-renderer []\n  (reify\n    replicant/IRender\n    (create-text-node [_this text]\n      (js/document.createTextNode text))\n\n    (create-element [_this tag-name options]\n      (if-let [ns (:ns options)]\n        (js/document.createElementNS ns tag-name)\n        (js/document.createElement tag-name)))\n\n    (set-style [this el style v]\n      (.setProperty (.-style el) (name style) v)\n      this)\n\n    (remove-style [this el style]\n      (.removeProperty (.-style el) (name style))\n      this)\n\n    (add-class [this el cn]\n      (.add (.-classList el) cn)\n      this)\n\n    (remove-class [this el cn]\n      (.remove (.-classList el) cn)\n      this)\n\n    (set-attribute [this el attr v opt]\n      (cond\n        (= \"innerHTML\" attr)\n        (set! (.-innerHTML el) v)\n\n        (= \"value\" attr)\n        (set! (.-value el) v)\n\n        (:ns opt)\n        (.setAttributeNS el (:ns opt) attr v)\n\n        :else\n        (.setAttribute el attr v))\n      this)\n\n    (remove-attribute [this el attr]\n      (if (= \"innerHTML\" attr)\n        (set! (.-innerHTML el) \"\")\n        (.removeAttribute el attr))\n      this)\n\n    (set-event-handler [this ^js/EventTarget el event handler]\n      (when-not (.-replicantHandlers el)\n        (set! (.-replicantHandlers el) #js {}))\n      (let [event (name event)]\n        (remove-listener el event)\n        (aset (.-replicantHandlers el) event handler)\n        (.addEventListener el event handler))\n      this)\n\n    (remove-event-handler [this ^js/EventTarget el event]\n      (let [event (name event)]\n        (remove-listener el event)\n        (aset (.-replicantHandlers el) event nil))\n      this)\n\n    (append-child [this el child-node]\n      (.appendChild el child-node)\n      this)\n\n    (insert-before [this el child-node reference-node]\n      (.insertBefore el child-node reference-node)\n      this)\n\n    (remove-child [this el child-node]\n      (.removeChild el child-node)\n      this)\n\n    (on-transition-end [this el f]\n      (-on-transition-end el f)\n      this)\n\n    (replace-child [this el insert-child replace-child]\n      (.replaceChild el insert-child replace-child)\n      this)\n\n    (remove-all-children [this el]\n      (set! (.-textContent el) \"\")\n      this)\n\n    (get-child [_this el idx]\n      (aget (.-childNodes el) idx))\n\n    (next-frame [_this f]\n      (on-next-frame f))))\n\n(defonce state (volatile! {}))\n\n(defn ^:export render\n  \"Render `hiccup` in DOM element `el`. Replaces any pre-existing content not\n  created by this function. Subsequent calls with the same `el` will update the\n  rendered DOM by comparing `hiccup` to the previous `hiccup`.\"\n  [el hiccup]\n  (let [rendering? (get-in @state [el :rendering?])]\n    (when-not (contains? @state el)\n      (set! (.-innerHTML el) \"\")\n      (vswap! state assoc el {:renderer (create-renderer)\n                              :unmounts (volatile! #{})\n                              :rendering? true\n                              :queue []}))\n    (if rendering?\n      (vswap! state update-in [el :queue] #(conj % hiccup))\n      (do\n        (vswap! state assoc-in [el :rendering?] true)\n        (let [{:keys [renderer current unmounts]} (get @state el)\n              {:keys [vdom]} (r/reconcile renderer el hiccup current {:unmounts unmounts})]\n          (vswap! state update el merge {:current vdom\n                                         :rendering? false})\n          (when-let [pending (first (:queue (get @state el)))]\n            (js/requestAnimationFrame #(render el pending))\n            (vswap! state update-in [el :queue] #(vec (rest %))))))))\n  el)\n\n(defn ^:export set-dispatch! [f]\n  (set! r/*dispatch* f))\n"],"x_google_ignoreList":[0]}