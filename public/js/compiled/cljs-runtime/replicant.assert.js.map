{"version":3,"sources":["replicant/assert.cljc"],"mappings":";AAOA,AAAKA,mCAAgB,6CAAA,7CAACC;AACtB,AAAKC,gCAAa,6CAAA,7CAACD;AACnB,AAAKE,yBAAM,6CAAA,7CAACF;AAEZ,iCAAA,jCAAMG;AAAN,AACE,IAAAC,qBAAiB,iBAAAE,oBAAKC;AAAL,AAAA,oBAAAD;AACK,OAAA,uFAAA,AAAAE,gBAAWD;;AADhBD;;;AAAjB,AAAA,oBAAAF;AAAA,cAAAA,VAASC;AAAT,AAEE,GACE,kCAAA,lCAACI,0BAAUJ;AACX,OAAA,4GAAqBA;;AAFvB,GAIE,6IAAA,7IAACI,0BAAU,AAAA,0GAAkBJ;AAC7B,8DAAA,mFAAA,4EAAA,tNAACK,+CAAOL;;AALV,GAOE,AAACM,cAAI,iBAAAC,WAAsB,AAAA,sGAAgBP;IAAtCQ,eAAA,iFAAA,8DAAA;AAAA,AAAA,QAAAA,6CAAAA,2CAAAD,YAAAC,wBAAAD;;AAPP;;AAAA,AAAA;;;;;;AAFF;;;AA0CF,gCAAA,hCAAME,wEAAcC,EAAEC;AAAtB,AACE,8CAAA,9CAACC,uBAAaf;;AACd,OAACgB,oBAAUhB,uBAAMa,EAAE,WAAKI,EAAEA,MAAEA,MAAEC;AAAX,AAAkB,QAACJ,kCAAAA,yCAAAA,TAAEI,sBAAAA;;;AAE1C,mCAAA,nCAAMC,8EAAiBN;AAAvB,AACE,OAACE,uBAAaf,uBAAMa","names":["replicant.assert/current-context","cljs.core.atom","replicant.assert/current-node","replicant.assert/error","replicant.assert/assert?","temp__5809__auto__","options","and__5000__auto__","cljs.env/*compiler*","cljs.core/deref","cljs.core/contains?","cljs.core.get_in","cljs.core/not","G__37826","fexpr__37825","replicant.assert/add-reporter","k","f","cljs.core/remove-watch","cljs.core/add-watch","_","error","replicant.assert/remove-reporter"],"sourcesContent":["(ns replicant.assert\n  (:require [cljs.env :as env]\n            [replicant.console-logger :as console]\n            [replicant.hiccup :as hiccup])\n  (:refer-clojure :exclude [assert])\n  #?(:cljs (:require-macros [replicant.assert])))\n\n(def current-context (atom nil))\n(def current-node (atom nil))\n(def error (atom nil))\n\n(defn assert? []\n  (if-let [options (and cljs.env/*compiler*\n                        (:options @cljs.env/*compiler*))]\n    (cond\n      (contains? options :replicant/asserts?)\n      (:replicant/asserts? options)\n\n      (contains? (:closure-defines options) \"replicant/asserts?\")\n      (get-in options [:closure-defines \"replicant/asserts?\"])\n\n      (not (#{:advanced :simple} (:optimizations options)))\n      true\n\n      :else false)\n    false))\n\n(defmacro enter-node [headers]\n  (when (assert?)\n    `(when ~headers\n       (when-let [ctx# (:replicant/context (hiccup/attrs ~headers))]\n         (reset! current-context ctx#))\n       (reset! current-node (hiccup/sexp ~headers)))))\n\n(defmacro assert [test title message & [hiccup]]\n  (when (assert?)\n    `(when (not ~test)\n       (let [fn# (:fn-name @current-context)\n             fd# (:data @current-context)]\n         (reset! error\n          (cond-> {:title ~title\n                   :message ~message\n                   :hiccup (or ~hiccup @current-node)}\n            fn# (assoc :fname fn#)\n            fd# (assoc :data fd#)))))))\n\n;; Install default reporter\n\n(defmacro configure []\n  (when (assert?)\n    `(add-watch error ::default (fn [_# _# _# error#] (console/report error#)))))\n\n;; API\n\n(defn add-reporter [k f]\n  (remove-watch error ::default)\n  (add-watch error k (fn [_ _ _ error] (f error))))\n\n(defn remove-reporter [k]\n  (remove-watch error k))\n"],"x_google_ignoreList":[0]}